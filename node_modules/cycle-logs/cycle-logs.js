"use strict"
var Q = require('q');
var FileSystem = require('fs');
var Path = require('path');

var LogFile = class {
  constructor(path) {
    this.Path = path;
    this.MaxLogsToKeep = 5;
    this.dirname = Path.dirname(this.Path);
    this.filename = Path.basename(this.Path);
  }

  cycle() {
    console.log("Cycling log: '" + this.Path + "'");
    var deferred = Q.defer();
    var FileOperations = [];

    FileSystem.readdir(Path.dirname(this.Path), (function(err, files) {
      if (err) {
        console.log(err);
        return false;
      }

      //console.log(files);
      if (files.indexOf(this.filename + "." + this.MaxLogsToKeep) >= 0) {
        FileOperations.push((function() {
          var FSUnlink = Q.nfbind(FileSystem.unlink);
          return FSUnlink(this.Path + "." + this.MaxLogsToKeep);
        }).bind(this));
      }

      for (let suffix = (this.MaxLogsToKeep - 1); suffix > 0; suffix--) {
        if (files.indexOf(this.filename + "." + suffix) >= 0) {
          // Rename the file to this.Path + "." + (suffix + 1)
          FileOperations.push((function() {
            var rename = Q.nfbind(FileSystem.rename);
            return rename(this.Path + "." + suffix, this.Path + "." + (suffix + 1));
          }).bind(this));
        }
        else {
          //console.log("File does not exist: '" + this.Path + "." + suffix + "'");
        }
      }

      if (files.indexOf(this.filename) >= 0) {
        FileOperations.push((function() {
          var rename = Q.nfbind(FileSystem.rename);
          return rename(this.Path, this.Path + ".1");
        }).bind(this));
      }

      // Above, we generated an array of File Operations (delete, rename, etc)
      //  now we need to run them in order.  This loop executes the each array
      //  element (which must return a promise) passing it the result of the
      //  previous promise (which we don't care about at this stage).
      // Honestly I don't understand it 100% myself.  Borrowed from:
      //  http://stackoverflow.com/questions/17757654/how-to-chain-a-variable-number-of-promises-in-q-in-order
      //console.log(FileOperations);
      var chain = FileOperations.reduce(function(previous, item) {
        //console.log("previous: ", previous);
        //console.log("previousValue: ", previousValue);
        //console.log("item: ", item);
        return previous.then(function(previousValue) {
          //console.log("item start", item);
          return item();
        })
      }, Q.resolve("test"));

      chain.catch(function(err) {
        // TODO: Proper error handling
        // console.log("catch", err);
        deferred.resolve(true);
      })
      chain.then(function() {
        //console.log("resolved");
        deferred.resolve(true);
      });
    }).bind(this));

    return deferred.promise;
  }
}

module.exports = function(path) {
  return new LogFile(path);
}
