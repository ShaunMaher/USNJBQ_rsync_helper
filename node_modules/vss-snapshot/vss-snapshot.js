"use strict"
var Q = require('q');
const exec = require('child_process').exec;

var VSSSnapshot = class {
  constructor(Volume, ID, CreationTime, Path) {
    this.Volume = Volume;
    this.ID = ID;
    this.CreationTime = CreationTime;
    this.Path = Path;
  }

  Age() {
    return Math.round((Date.now() - this.CreationTime) / 1000);
  }
  Delete() {
    let deferred = Q.defer();

    setTimeout(function() {
      deferred.reject(new Error("VSSSnapshot.Delete not yet implemented."));
    }, 1);

    return deferred.promise;
  }
  getType() {
    return this.constructor;
  }
}

function VSSSnapshots() {
  if (!this) {
    return new VSSSnapshots();
  }

  this.Create = function(volume) {
    let deferred = Q.defer();

    exec("vssadmin.exe create shadow /For=" + volume, function(error, stdout, stderr) {
      if (error) {
        deferred.reject(error);
      }

      var ThisSnapshotID = '';
      var ThisSnapshotPath = '';
      for (let line of stdout.split("\n")) {
        if (line.match(/Shadow Copy ID: /g)) {
          ThisSnapshotID = ((line.split(/Shadow Copy ID: /))[1]).replace(/\r/, '');
        }
        else if (line.match(/Shadow Copy Volume Name: /g)) {
          ThisSnapshotPath = ((line.split(/Shadow Copy Volume Name: /))[1]).replace(/\r/, '');
        }
      }
      deferred.resolve(new VSSSnapshot(volume, ThisSnapshotID, Date.now(), ThisSnapshotPath));
    });
    return deferred.promise;
  }

  this.List = function(volume) {
    let deferred = Q.defer();
    let Snapshots = []; //{"test": new VSSSnapshot(volume, '{e700ba05-a8b6-4f43-924e-85575bbe4c13}', ' 6/06/2016 12:00:01 PM')};

    exec("vssadmin.exe list shadows /For=" + volume, function(error, stdout, stderr) {
      if (error) {
        deferred.reject(error);
      }
      //console.log(stdout);
      //console.log(stderr);

      var ThisSnapshotID = '';
      var ThisSnapshotCreationTime = '';
      var ThisSnapshotPath = '';
      var lines = stdout.split("\n");
      console.log("Lines: " + lines.length);
      for (let index in lines) {
        let line = lines[index].replace(/\r/, '');

        // Beginning of a new record or the end of the previous record
        if (line.match(/Contents of shadow copy set ID:/g) || (line.length < 1) || (index == lines.length)) {
          if (ThisSnapshotID.length > 0) {
            var NewVSSSnapshot = new VSSSnapshot(volume, ThisSnapshotID, ThisSnapshotCreationTime, ThisSnapshotPath);
            Snapshots.push(NewVSSSnapshot);
          }
          ThisSnapshotID = '';
          ThisSnapshotCreationTime = '';
          ThisSnapshotPath = '';
        }
        else if (line.match(/shadow copies at creation time: /g)) {
          ThisSnapshotCreationTime = ((line.split(/shadow copies at creation time: /))[1]).replace(/\r/, '');
          // Mutter...non-standard date formats...mutter...hack.
          //TODO: Australian specific hack.  Will need be smarter about this.
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/01\//, ' Jan ');
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/02\//, ' Feb ');
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/03\//, ' Mar ');
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/04\//, ' Apr ');
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/05\//, ' May ');
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/06\//, ' Jun ');
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/07\//, ' Jul ');
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/08\//, ' Aug ');
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/09\//, ' Sep ');
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/10\//, ' Oct ');
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/11\//, ' Nov ');
          ThisSnapshotCreationTime = ThisSnapshotCreationTime.replace(/\/12\//, ' Dec ');
          ThisSnapshotCreationTime = new Date(ThisSnapshotCreationTime);
        }
        else if (line.match(/Shadow Copy ID: /g)) {
          ThisSnapshotID = ((line.split(/Shadow Copy ID: /))[1]).replace(/\r/, '');
        }
        else if (line.match(/Shadow Copy Volume: /g)) {
          ThisSnapshotPath = ((line.split(/Shadow Copy Volume: /))[1]).replace(/\r/, '');
        }
      }

      deferred.resolve(Snapshots);
    })

    return deferred.promise;
  }
}

module.exports = new VSSSnapshots();
module.exports.VSSSnapshot = VSSSnapshot;
